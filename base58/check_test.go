package base58

import (
	"testing"
)

func equalSlices(a, b []byte) bool {
	if len(a) != len(b) {
		return false
	}

	if (a == nil) != (b == nil) {
		return false
	}

	b = b[:len(a)] // this line is the key to BCE
	for i, v := range a {
		if v != b[i] { // here is no bounds checking for b[i]
			return false
		}
	}

	return true
}

func TestPublicHash(t *testing.T) {
	expected := []byte{0x01, 0x09, 0x66, 0x77, 0x60, 0x06, 0x95, 0x3d, 0x55, 0x67, 0x43, 0x9e, 0x5e, 0x39, 0xf8, 0x6a, 0x0d, 0x27, 0x3b, 0xee}
	actual := PublicHash([]byte{0x04, 0x50, 0x86, 0x3a, 0xd6, 0x4a, 0x87, 0xae, 0x8a, 0x2f, 0xe8, 0x3c, 0x1a, 0xf1, 0xa8, 0x40, 0x3c, 0xb5, 0x3f, 0x53, 0xe4, 0x86, 0xd8, 0x51, 0x1d, 0xad, 0x8a, 0x04, 0x88, 0x7e, 0x5b, 0x23, 0x52, 0x2c, 0xd4, 0x70, 0x24, 0x34, 0x53, 0xa2, 0x99, 0xfa, 0x9e, 0x77, 0x23, 0x77, 0x16, 0x10, 0x3a, 0xbc, 0x11, 0xa1, 0xdf, 0x38, 0x85, 0x5e, 0xd6, 0xf2, 0xee, 0x18, 0x7e, 0x9c, 0x58, 0x2b, 0xa6})

	if !equalSlices(actual, expected) {
		t.Errorf("expected: %v, actual: %v", expected, actual)
	}
}
func TestCheckPubkeyHash(t *testing.T) {
	expected := "16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM"
	actual := Check([]byte{0x01, 0x09, 0x66, 0x77, 0x60, 0x06, 0x95, 0x3d, 0x55, 0x67, 0x43, 0x9e, 0x5e, 0x39, 0xf8, 0x6a, 0x0d, 0x27, 0x3b, 0xee}, BITCOIN_PUBKEY_HASH, false)

	if actual != expected {
		t.Errorf("expected: %v, actual: %v", expected, actual, false)
	}
}

func TestCheckPrivkey(t *testing.T) {
	expected := "5J1F7GHadZG3sCCKHCwg8Jvys9xUbFsjLnGec4H125Ny1V9nR6V"
	actual := Check([]byte{0x18, 0xe1, 0x4a, 0x7b, 0x6a, 0x30, 0x7f, 0x42, 0x6a, 0x94, 0xf8, 0x11, 0x47, 0x01, 0xe7, 0xc8, 0xe7, 0x74, 0xe7, 0xf9, 0xa4, 0x7e, 0x2c, 0x20, 0x35, 0xdb, 0x29, 0xa2, 0x06, 0x32, 0x17, 0x25}, BITCOIN_PRIVKEY, false)

	if actual != expected {
		t.Errorf("expected: %v, actual: %v", expected, actual)
	}
}
